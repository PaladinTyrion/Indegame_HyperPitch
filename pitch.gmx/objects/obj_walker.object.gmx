<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_walker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxhp=48;
hp=maxhp;
points=350;
hurtpitch=2;
alarm[0]=1;
barrel=0;

order=1;
firstwait=40;
dir=5;
walk=0;
walkmax=45-global.difficulty*5; //Anything over 30 is waiting time
if (walkmax&lt;32)
    walkmax=32;
bulletspeed=1.0+global.difficulty*0.18;
if (bulletspeed&gt;3.4)
    bulletspeed=3.4;

killtype=0;
killdir=0;
nopoints=0;
type=0;
image_single=0;
enemytype=12;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.difficulty==2)
    type=0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HITFLASH
if (hitflash&gt;0)
    hitflash-=1;

depth=312-y+obj_sabot.y;

//BUSTED
if (halfpoint){
    if (smoke2&lt;160){
        smoke2+=1;
        smoke+=1;
        if (smoke==3){
            smoke=0;
            (instance_create(x-10+random(20),y-14+random(20),obj_smoke)).depth-=10;
            }
        }
    }

//DIE
if (hp&lt;=0 || (hp&lt;=maxhp/2 &amp;&amp; !halfpoint)){
    if (!halfpoint)
        killtype=4;
    if (!nopoints){
        if (doublescore){
            global.points+=points*global.multiplier;
            if (global.showscore)
                (instance_create(x,y-4,obj_scorenumber)).points=points*global.multiplier;
            }
        else{
            global.points+=points*global.multiplier/2;
            if (global.showscore)
                (instance_create(x,y-4,obj_scorenumber)).points=points*global.multiplier/2;
            }
        if (halfpoint || doublescore)
            instance_create(x,y+6,obj_pickup);
        }
    scr_randnuke(1);
    if (halfpoint){
        scr_spawnfire();
        scr_spawnfire();
        }
    //CANNON
    if (killtype==1){
        scr_explo2();
        instance_destroy();
        global.stats[0]+=1;
        instance_create(x,y,obj_bigexplo);
        (instance_create(x,y,obj_hurtexplo)).hurt=1;
        if (global.shakescreen&lt;8)
            global.shakescreen+=6;
        if (!nopoints){
            repeat(4){
                tempid=instance_create(x,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=8;
                tempid.direction=killdir-45+random(90);
                tempid.vspeed*=0.85;
                tempid=instance_create(x,y,obj_elfgib);
                tempid.type=7;
                tempid.direction=killdir-45+random(90);
                tempid.vspeed*=0.85;
                }
            }
        }
    //ICE
    else if (killtype==2){
        instance_destroy();
        global.stats[0]+=1;
        if (global.shakescreen&lt;8)
            global.shakescreen+=6;
        instance_create(x,y,obj_iceflash);
        repeat(8){
            tempid=instance_create(x,y,obj_icegib);
            tempid.direction=killdir-45+random(90);
            }
        for (i=0;i&lt;8;i+=1){
            tempid=instance_create(x,y,obj_icepuff);
                tempid.direction=i*45;
                tempid.speed=7;
            }
        if (megaice || random(1)&lt;0.1){   //Power ice
            scr_icekillbig();
            scr_megaicefx(0);
            repeat(4){
                tempid=instance_create(x,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=4;
                tempid.direction=random(360);
                tempid.speed=0.3+random(0.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(5)+3;
                tempid=instance_create(x,y,obj_elfgib);
                tempid.type=15;
                tempid.direction=random(360);
                tempid.speed=0.3+random(0.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(5)+3;
                }
            }
        else
            scr_icekill();
        }
    //LASER
    else if (killtype==3){
        scr_rainbowkill();
        instance_destroy();
        global.stats[0]+=1;
        global.flash=1;
        for (i=0;i&lt;7;i+=1){
            tempid=instance_create(x-1,y-5,obj_laserexplo);
            tempid.img4=i;
            tempid.speed=(-6+i*2)*3;
            tempid.direction=killdir+90;
            tempid.image_single=tempid.img4*9;
            if (hyperlaser){
                tempid.sprite_index=spr_hyperlaserexplo;
                tempid.image_single=0;
                }
            tempid=instance_create(x-1,y-5,obj_laserexplo);
            tempid.img4=i;
            tempid.speed=16;
            tempid.direction=i*51.42;
            tempid.vspeed*=0.75;
            tempid.image_single=tempid.img4*9;
            if (hyperlaser){
                tempid.sprite_index=spr_hyperlaserexplo;
                tempid.image_single=0;
                }
            }
        }
    //NUKE
    if (killtype==4){
        scr_explo2();
        if (halfpoint){
            instance_destroy();
            global.stats[0]+=1;
            }
        instance_create(x,y,obj_bigexplo);
        (instance_create(x,y,obj_hurtexplo)).hurt=1;
        if (global.shakescreen&lt;8)
            global.shakescreen+=6;
        if (!nopoints){
            repeat(4){
                tempid=instance_create(x,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=8;
                tempid.direction=random(360);
                tempid.speed=0.1+random(1.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(6)+3;
                tempid=instance_create(x,y,obj_elfgib);
                tempid.type=7;
                tempid.direction=random(360);
                tempid.speed=0.1+random(1.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(6)+3;
                }
            }
        }
    if (!halfpoint)
        halfpoint=1;
    }

//ORDER
if (firstwait&gt;0)
    firstwait-=1;
if (!perform &amp;&amp; firstwait==0){
    order+=1;
    perform=1;
    if (order==4){
        order=0;
        fire=walkmax;
        }
    else{
        //Collission checks
        r=0; u=0; l=0; d=0;
        if (!place_free(x+28,y) || place_meeting(x+42,y,obj_walker) || place_meeting(x+42,y+20,obj_walker) || place_meeting(x+42,y-20,obj_walker))
            r=1;
        if (!place_free(x,y-20) || place_meeting(x,y-30,obj_walker) || place_meeting(x+28,y-30,obj_walker) || place_meeting(x-28,y-30,obj_walker))
            u=1;
        if (!place_free(x-28,y) || place_meeting(x-42,y,obj_walker) || place_meeting(x-42,y+20,obj_walker) || place_meeting(x-42,y-20,obj_walker))
            l=1;
        if (!place_free(x,y+20) || place_meeting(x,y+30,obj_walker) || place_meeting(x+28,y+30,obj_walker) || place_meeting(x-28,y+30,obj_walker))
            d=1;
        //Choose direction
        dx=x-obj_pitch.x;
        dy=y-obj_pitch.y;
        if (abs(dx)&gt;abs(dy)){
            if (dx&lt;0)
                dir=0;
            else
                dir=2;
            }
        else if (dy&lt;0)
            dir=3;
        else
            dir=1;
        //Blocked by wall
        //Right
        if (dir==0){
            if (r){
                if (y&gt;obj_pitch.y &amp;&amp; !u)
                    dir=1;
                else if (!d)
                    dir=3;
                else if (!u)
                    dir=1;
                else if (!l)
                    dir=2;
                else
                    dir=5;
                }
            }
        //Up
        else if (dir==1){
            if (u){
                if (x&gt;obj_pitch.x &amp;&amp; !l)
                    dir=2;
                else if (!r)
                    dir=0;
                else if (!l)
                    dir=2;
                else if (!d)
                    dir=3;
                else
                    dir=5;
                }
            }
        //Left
        else if (dir==2){
            if (l){
                if (y&gt;obj_pitch.y &amp;&amp; !u)
                    dir=1;
                else if (!d)
                    dir=3;
                else if (!u)
                    dir=1;
                else if (!r)
                    dir=0;
                else
                    dir=5;
                }
            }
        //Down
        else if (dir==3){
            if (d){
                if (x&gt;obj_pitch.x &amp;&amp; !l)
                    dir=2;
                else if (!r)
                    dir=0;
                else if (!l)
                    dir=2;
                else if (!u)
                    dir=1;
                else
                    dir=5;
                }
            }
        }
    }


//FIRE
if (order==0){
    fire-=1;
    if (fire==8 &amp;&amp; !halfpoint){
        if (!global.nosound){
            sound_stop(snd_enemyfire2);
            sound_play(snd_enemyfire2);
            }
        //TYPE 0
        if (type==0){
            tempid=instance_create(x+9,y-7,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=45;
            tempid=instance_create(x-9,y-7,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=135;
            tempid=instance_create(x-9,y+7,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=225;
            tempid=instance_create(x+9,y+7,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=315;
            }
        //TYPE 1
        else if (type==1){
            tempid=instance_create(x+12,y+2,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=0;
            tempid=instance_create(x+9,y-7,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=45;
            tempid=instance_create(x,y-10,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=90;
            tempid=instance_create(x-9,y-7,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=135;
            tempid=instance_create(x-12,y+2,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=180;
            tempid=instance_create(x-9,y+7,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=225;
            tempid=instance_create(x,y+10,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=270;
            tempid=instance_create(x+9,y+7,obj_enemybullet2);
            tempid.speed=bulletspeed;
            tempid.direction=315;
            }
        //TYPE 2
        else if (type==2){
            tempid=instance_create(x+9,y-7,obj_enemybullet3);
            tempid.speed=bulletspeed;
            tempid.direction=45;
            tempid=instance_create(x-9,y-7,obj_enemybullet3);
            tempid.speed=bulletspeed;
            tempid.direction=135;
            tempid=instance_create(x-9,y+7,obj_enemybullet3);
            tempid.speed=bulletspeed;
            tempid.direction=225;
            tempid=instance_create(x+9,y+7,obj_enemybullet3);
            tempid.speed=bulletspeed;
            tempid.direction=315;
            }
        //TYPE 3
        else if (type==3){
            tempid=instance_create(x+12,y+2,obj_enemybullet3);
            tempid.speed=bulletspeed;
            tempid.direction=0;
            tempid=instance_create(x+9,y-7,obj_enemybullet);
            tempid.speed=bulletspeed;
            tempid.direction=45;
            tempid=instance_create(x,y-10,obj_enemybullet3);
            tempid.speed=bulletspeed;
            tempid.direction=90;
            tempid=instance_create(x-9,y-7,obj_enemybullet);
            tempid.speed=bulletspeed;
            tempid.direction=135;
            tempid=instance_create(x-12,y+2,obj_enemybullet3);
            tempid.speed=bulletspeed;
            tempid.direction=180;
            tempid=instance_create(x-9,y+7,obj_enemybullet);
            tempid.speed=bulletspeed;
            tempid.direction=225;
            tempid=instance_create(x,y+10,obj_enemybullet3);
            tempid.speed=bulletspeed;
            tempid.direction=270;
            tempid=instance_create(x+9,y+7,obj_enemybullet);
            tempid.speed=bulletspeed;
            tempid.direction=315;
            }
        }
    //Anim
    else if (fire&gt;8 &amp;&amp; !halfpoint){
        fireimg+=1;
        if (fireimg==2)
            image_single=1;
        else if (fireimg==4){
            image_single=halfpoint*16;
            fireimg=0;
            }
        }
    else{
        image_single=halfpoint*16;
        fireimg=0;
        }
    //Done
    if (fire==0){
        perform=0;
        image_single=halfpoint*16;
        }
    }
//WALK
else{
    walk+=1;
    if (walk mod 2==0){
        walk2+=1;
        //Right
        if (dir==0 &amp;&amp; walk2&gt;3 &amp;&amp; walk2&lt;12){
            if (walk2==4){
                if (!global.nosound){
                    sound_stop(snd_trundle);
                    sound_play(snd_trundle);
                    }
                }
            image_single=walk2-2+halfpoint*14;
            x+=3;
            if (walk2==11)
                image_single=halfpoint*16;
            }
        //Left
        else if (dir==2 &amp;&amp; walk2&gt;3 &amp;&amp; walk2&lt;12){
            if (walk2==4){
                if (!global.nosound){
                    sound_stop(snd_trundle);
                    sound_play(snd_trundle);
                    }
                }
            image_single=12-walk2+halfpoint*14;
            x-=3;
            if (walk2==11)
                image_single=halfpoint*16;
            }
        //Up
        else if (dir==1 &amp;&amp; walk2&gt;3 &amp;&amp; walk2&lt;12){
            if (walk2==4){
                if (!global.nosound){
                    sound_stop(snd_trundle);
                    sound_play(snd_trundle);
                    }
                }
            image_single=19-walk2+halfpoint*15;
            y-=2;
            if (walk2==11)
                image_single=halfpoint*16;
            }
        //Down
        else if (dir==3 &amp;&amp; walk2&gt;3 &amp;&amp; walk2&lt;12){
            if (walk2==4){
                if (!global.nosound){
                    sound_stop(snd_trundle);
                    sound_play(snd_trundle);
                    }
                }
            image_single=walk2+5+halfpoint*15;
            y+=2;
            if (walk2==11)
                image_single=halfpoint*16;
            }
        }
    //Done
    if (walk==walkmax){
        walk=0;
        walk2=0;
        perform=0;
        image_single=0+halfpoint*16;
        }
    }

if (halfpoint &amp;&amp; image_single==0)
    image_single=16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_single,x,y);
if (!halfpoint)
    draw_sprite(spr_walkertag,type,x,y);
if (hitflash&gt;0)
    draw_sprite(sprite_index,image_single+31,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
