<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_heavytrain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movespeed=0.3+global.difficulty*0.2;
if (movespeed&gt;1.2)
    movespeed=1.2;
maxhp=32;
hp=maxhp;
points=400;
image_single=0;
hurtpitch=2;
depth=320-y+obj_sabot.y;
alarm[0]=10;

invincible=0;

firemax=floor((6-(global.difficulty/1.5))*20);
if (firemax&lt;40)
    firemax=40;
fire=firemax;
bulletspeed=1.0+global.difficulty*0.3;
if (bulletspeed&gt;6)
    bulletspeed=6;

delay=0;
killtype=0;
killdir=0;
nopoints=0;
enemytype=13;
dir=floor(random(2));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>primed=1;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HITFLASH
if (hitflash&gt;0)
    hitflash-=1;

//BUSTED
if (halfpoint){
    if (smoke2&lt;160){
        smoke2+=1;
        smoke+=1;
        if (smoke==4){
            smoke=0;
            instance_create(x-18+random(32),y-6+random(4),obj_smoke);
            }
        }
    }

//DIE
if (hp&lt;=0 || (hp&lt;=maxhp/2 &amp;&amp; !halfpoint)){
    if (!halfpoint)
        killtype=4;
    if (!nopoints){
        if (doublescore){
            global.points+=points*global.multiplier;
            if (global.showscore)
                (instance_create(x,y-4,obj_scorenumber)).points=points*global.multiplier;
            }
        else{
            global.points+=points*global.multiplier/2;
            if (global.showscore)
                (instance_create(x,y-4,obj_scorenumber)).points=points*global.multiplier/2;
            }
        if (halfpoint || doublescore)
            instance_create(x,y+4,obj_pickup);
        }
    scr_randnuke(1);
    if (halfpoint){
        scr_spawnfire();
        scr_spawnfire();
        }
    //CANNON
    if (killtype==1){
        scr_explo2();
        if (halfpoint){
            instance_destroy();
            global.stats[0]+=1;
            }
        if (global.shakescreen&lt;8)
            global.shakescreen+=6;
        if (type==0)
            gibcol=3;
        else if (type==1)
            gibcol=4;
        else if (type==2)
            gibcol=2;
        for (i=0;i&lt;4;i+=1){
            instance_create(x-24+i*16,y-4,obj_bigexplo);
            if (!nopoints){
                tempid=instance_create(x-24+i*16,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=gibcol;
                tempid.direction=killdir-22.5+random(45);
                tempid.vspeed*=0.85;
                tempid=instance_create(x-24+i*16,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=8;
                tempid.direction=killdir-22.5+random(45);
                tempid.vspeed*=0.85;
                tempid=instance_create(x,y,obj_elfgib);
                tempid.type=7;
                tempid.direction=killdir-22.5+random(45);
                tempid.vspeed*=0.85;
                }
            }
        }
    //ICE
    else if (killtype==2){
        if (halfpoint){
            instance_destroy();
            global.stats[0]+=1;
            }
        if (global.shakescreen&lt;8)
            global.shakescreen+=6;
        instance_create(x,y,obj_iceflash);
        for (j=0;j&lt;4;j+=1){
            for (i=0;i&lt;4;i+=1){
                tempid=instance_create(x-24+j*16,y,obj_icepuff);
                tempid.direction=i*90+45;
                tempid.speed=7;
                }
            repeat(4){
                tempid=instance_create(x-24+j*16,y,obj_icegib);
                tempid.direction=killdir-45+random(90);
                }
            }
        if (megaice || random(1)&lt;0.1){   //Power ice
            scr_icekillbig();
            scr_megaicefx(0);
            for (i=0;i&lt;4;i+=1){
                tempid=instance_create(x-24+i*16,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=4;
                tempid.direction=random(360);
                tempid.speed=0.3+random(0.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(5)+3;
                tempid=instance_create(x-24+i*16,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=4;
                tempid.direction=random(360);
                tempid.speed=0.3+random(0.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(5)+3;
                tempid=instance_create(x,y,obj_elfgib);
                tempid.type=15;
                tempid.direction=random(360);
                tempid.speed=0.3+random(0.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(5)+3;
                }
            }
        else
            scr_icekill();
        }
    //LASER
    else if (killtype==3){
        scr_rainbowkill();
        if (halfpoint){
            instance_destroy();
            global.stats[0]+=1;
            }
        global.flash=1;
        for (i=0;i&lt;7;i+=1){
            tempid=instance_create(x,y+4,obj_laserexplo);
            tempid.img4=i;
            tempid.speed=16;
            tempid.direction=i*51.42;
            tempid.vspeed*=0.75;
            tempid.image_single=tempid.img4*9;
            if (hyperlaser){
                tempid.sprite_index=spr_hyperlaserexplo;
                tempid.image_single=0;
                }
            tempid=instance_create(x-14+i*4,y+4,obj_laserexplo);
            tempid.img4=i;
            tempid.speed=(-6+i*2)*3;
            tempid.direction=0;
            tempid.image_single=tempid.img4*9;
            if (hyperlaser){
                tempid.sprite_index=spr_hyperlaserexplo;
                tempid.image_single=0;
                }
            }
        }
    //NUKE
    else if (killtype==4){
        scr_explo2();
        if (halfpoint){
            instance_destroy();
            global.stats[0]+=1;
            }
        if (type==0)
            gibcol=3;
        else if (type==1)
            gibcol=4;
        else if (type==2)
            gibcol=2;
        if (global.shakescreen&lt;8)
            global.shakescreen+=6;
        for (i=0;i&lt;4;i+=1){
            instance_create(x-24+i*16,y-4,obj_bigexplo);
            if (!nopoints){
                tempid=instance_create(x-24+i*16,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=gibcol;
                tempid.direction=random(360);
                tempid.speed=0.3+random(0.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(5)+3;
                tempid=instance_create(x-24+i*16,y,obj_elfgib);
                tempid.sprite_index=spr_bulbgibs;
                tempid.type=8;
                tempid.direction=random(360);
                tempid.speed=0.3+random(0.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(5)+3;
                tempid=instance_create(x,y,obj_elfgib);
                tempid.type=7;
                tempid.direction=random(360);
                tempid.speed=0.3+random(0.8);
                tempid.vspeed*=0.85;
                tempid.zspeed=random(5)+3;
                }
            }
        }
    if (!halfpoint){
        halfpoint=1;
        image_single+=3;
        }
    }

//FIRE
if (hp&gt;maxhp/2)
    fire-=1;
     if (fire==12) fireimg=1;
else if (fire==10) fireimg=2;
else if (fire==8) fireimg=3;
else if (fire==6) fireimg=4;
else if (fire==4) fireimg=5;
else if (fire==2) fireimg=6;
if (fire&lt;=0){
    if (!global.nosound){
        sound_stop(snd_enemyfire2);
        sound_play(snd_enemyfire2);
        }
    fireimg=0;
    fire=firemax;
    if (type==0){
        tempid=instance_create(x-10,y-5,obj_enemybullet2);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        tempid=instance_create(x,y-5,obj_enemybullet2);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        tempid=instance_create(x+10,y-5,obj_enemybullet2);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        }
    else if (type==1){
        tempid=instance_create(x-10,y-5,obj_enemybullet);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        tempid=instance_create(x,y-5,obj_enemybullet);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        tempid=instance_create(x+10,y-5,obj_enemybullet);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        }
    else if (type==2){
        tempid=instance_create(x-10,y-5,obj_enemybullet3);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        tempid=instance_create(x,y-5,obj_enemybullet3);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        tempid=instance_create(x+10,y-5,obj_enemybullet3);
        tempid.direction=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
        tempid.speed=bulletspeed;
        }
    }

//MOVE
if (primed){
    if (x&lt;obj_sabot.x-8 || x&gt;obj_sabot.x+328)
        instance_destroy();
    if (dir==0){
        hspeed-=movespeed/4;
        if (hspeed&lt;-movespeed)
            hspeed=-movespeed;
        if (place_meeting(x,y,obj_gotrainright) || !place_free(x-16,y+4))
            dir=1;
        }
    else if (dir==1){
        hspeed+=movespeed/4;
        if (hspeed&gt;movespeed)
            hspeed=movespeed;
        if (place_meeting(x,y,obj_gotrainleft) || !place_free(x+16,y+4))
            dir=0;
        }
    }

/*if (primed){
    if (x&lt;obj_sabot.x-8 || x&gt;obj_sabot.x+328)
        instance_destroy();
    dx=(abs(x-obj_pitch.x))/20;
    if (dx==0)
        dx=0.0001;
    if (place_meeting(x,y,obj_gotrainleft) || !place_free(x+16,y+4)){
        hspeed-=0.08*movespeed;
        moveleft=10;
        }
    else if (place_meeting(x,y,obj_gotrainright) || !place_free(x-16,y+4)){
        hspeed+=0.08*movespeed;
        moveright=10;
        }
    if (moveleft&gt;0)
        hspeed-=(0.08*movespeed)*dx;
    else if (moveright&gt;0)
        hspeed+=(0.08*movespeed)*dx;
    else if (x&gt;obj_pitch.x)
        hspeed-=(0.08*movespeed)*dx;
    else if (x&lt;=obj_pitch.x)
        hspeed+=(0.08*movespeed)*dx;
    if (abs(hspeed)&lt;0.05)
        hspeed=0;
    if (moveleft&gt;0)
        moveleft-=1;
    if (moveright&gt;0)
        moveright-=1;
    
    if (hspeed&lt;-movespeed)
        hspeed=-movespeed;
    if (hspeed&gt;movespeed)
        hspeed=movespeed;
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_single,x,y);
if (hp&gt;maxhp/2){
pd=point_direction(x,y-5,obj_pitch.x,obj_pitch.y);
if (pd&gt;11.25 &amp;&amp; pd&lt;348.75) gunimg=((pd)/22.5);
else gunimg=0;
draw_sprite(spr_sleighgun,gunimg,x-10,y-5);
draw_sprite(spr_sleighgun,gunimg,x,y-5);
draw_sprite(spr_sleighgun,gunimg,x+10,y-5);
if (fireimg&gt;0){
    draw_sprite(spr_enemyfire,fireimg-1,x-10,y-5);
    draw_sprite(spr_enemyfire,fireimg-1,x,y-5);
    draw_sprite(spr_enemyfire,fireimg-1,x+10,y-5);
    }
}
if (hitflash&gt;0){
    if (hp&gt;maxhp/2){
        draw_sprite(sprite_index,6,x,y);
        draw_sprite(spr_sleighgun,gunimg+16,x-10,y-5);
        draw_sprite(spr_sleighgun,gunimg+16,x,y-5);
        draw_sprite(spr_sleighgun,gunimg+16,x+10,y-5);
        }
    else
        draw_sprite(sprite_index,7,x,y);
    }</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
